/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/Lee/Documents/P4/compiler/src/java.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\3\1\2\1\0\1\3\1\1\16\31\4\0\1\3\1\0"+
    "\1\12\1\0\1\30\2\0\1\13\1\54\1\55\1\5\1\61\1\27"+
    "\1\11\1\7\1\4\12\6\1\56\2\0\1\60\3\0\1\40\1\44"+
    "\1\30\1\35\1\10\1\33\1\43\1\41\1\32\1\30\1\45\1\20"+
    "\1\30\1\34\1\37\1\50\1\53\1\42\1\36\1\46\1\47\1\51"+
    "\1\30\1\57\2\30\1\0\1\14\2\0\1\52\1\0\1\25\3\30"+
    "\1\23\3\30\1\21\2\30\1\26\1\17\1\15\3\30\1\24\1\30"+
    "\1\22\1\16\5\30\3\0\1\62\41\31\2\0\4\30\4\0\1\30"+
    "\2\0\1\31\7\0\1\30\4\0\1\30\5\0\27\30\1\0\37\30"+
    "\1\0\u01ca\30\4\0\14\30\16\0\5\30\7\0\1\30\1\0\1\30"+
    "\21\0\160\31\5\30\1\0\2\30\2\0\4\30\10\0\1\30\1\0"+
    "\3\30\1\0\1\30\1\0\24\30\1\0\123\30\1\0\213\30\1\0"+
    "\5\31\2\0\236\30\11\0\46\30\2\0\1\30\7\0\47\30\11\0"+
    "\55\31\1\0\1\31\1\0\2\31\1\0\2\31\1\0\1\31\10\0"+
    "\33\30\5\0\3\30\15\0\4\31\7\0\1\30\4\0\13\31\5\0"+
    "\53\30\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\0"+
    "\6\31\2\30\2\31\1\0\4\31\2\30\12\31\3\30\2\0\1\30"+
    "\17\0\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31\1\30"+
    "\16\0\12\31\41\30\11\31\2\30\4\0\1\30\5\0\26\30\4\31"+
    "\1\30\11\31\1\30\3\31\1\30\5\31\22\0\31\30\3\31\244\0"+
    "\4\31\66\30\3\31\1\30\22\31\1\30\7\31\12\30\2\31\2\0"+
    "\12\31\1\0\7\30\1\0\7\30\1\0\3\31\1\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30\2\0"+
    "\1\31\1\30\7\31\2\0\2\31\2\0\3\31\1\30\10\0\1\31"+
    "\4\0\2\30\1\0\3\30\2\31\2\0\12\31\4\30\7\0\1\30"+
    "\5\0\3\31\1\0\6\30\4\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\2\30\1\0\2\30\2\0\1\31\1\0\5\31"+
    "\4\0\2\31\2\0\3\31\3\0\1\31\7\0\4\30\1\0\1\30"+
    "\7\0\14\31\3\30\1\31\13\0\3\31\1\0\11\30\1\0\3\30"+
    "\1\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\31"+
    "\1\30\10\31\1\0\3\31\1\0\3\31\2\0\1\30\17\0\2\30"+
    "\2\31\2\0\12\31\1\0\1\30\17\0\3\31\1\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0"+
    "\1\31\1\30\7\31\2\0\2\31\2\0\3\31\10\0\2\31\4\0"+
    "\2\30\1\0\3\30\2\31\2\0\12\31\1\0\1\30\20\0\1\31"+
    "\1\30\1\0\6\30\3\0\3\30\1\0\4\30\3\0\2\30\1\0"+
    "\1\30\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0"+
    "\5\31\3\0\3\31\1\0\4\31\2\0\1\30\6\0\1\31\16\0"+
    "\12\31\11\0\1\30\7\0\3\31\1\0\10\30\1\0\3\30\1\0"+
    "\27\30\1\0\12\30\1\0\5\30\3\0\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\7\0\2\31\1\0\2\30\6\0\2\30\2\31\2\0"+
    "\12\31\22\0\2\31\1\0\10\30\1\0\3\30\1\0\27\30\1\0"+
    "\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31\1\0"+
    "\4\31\7\0\2\31\7\0\1\30\1\0\2\30\2\31\2\0\12\31"+
    "\1\0\2\30\17\0\2\31\1\0\10\30\1\0\3\30\1\0\51\30"+
    "\2\0\1\30\7\31\1\0\3\31\1\0\4\31\1\30\10\0\1\31"+
    "\10\0\2\30\2\31\2\0\12\31\12\0\6\30\2\0\2\31\1\0"+
    "\22\30\3\0\30\30\1\0\11\30\1\0\1\30\2\0\7\30\3\0"+
    "\1\31\4\0\6\31\1\0\1\31\1\0\10\31\22\0\2\31\15\0"+
    "\60\30\1\31\2\30\7\31\4\0\10\30\10\31\1\0\12\31\47\0"+
    "\2\30\1\0\1\30\2\0\2\30\1\0\1\30\2\0\1\30\6\0"+
    "\4\30\1\0\7\30\1\0\3\30\1\0\1\30\1\0\1\30\2\0"+
    "\2\30\1\0\4\30\1\31\2\30\6\31\1\0\2\31\1\30\2\0"+
    "\5\30\1\0\1\30\1\0\6\31\2\0\12\31\2\0\2\30\42\0"+
    "\1\30\27\0\2\31\6\0\12\31\13\0\1\31\1\0\1\31\1\0"+
    "\1\31\4\0\2\31\10\30\1\0\44\30\4\0\24\31\1\0\2\31"+
    "\5\30\13\31\1\0\44\31\11\0\1\31\71\0\53\30\24\31\1\30"+
    "\12\31\6\0\6\30\4\31\4\30\3\31\1\30\3\31\2\30\7\31"+
    "\3\30\4\31\15\30\14\31\1\30\17\31\2\0\46\30\12\0\53\30"+
    "\1\0\1\30\3\0\u0149\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30"+
    "\2\0\7\30\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30"+
    "\1\0\4\30\2\0\103\30\2\0\3\31\40\0\20\30\20\0\125\30"+
    "\14\0\u026c\30\2\0\21\30\1\0\32\30\5\0\113\30\3\0\3\30"+
    "\17\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31\13\0\22\30"+
    "\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0\64\30\40\31"+
    "\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0\3\31\2\0"+
    "\12\31\6\0\130\30\10\0\51\30\1\31\1\30\5\0\106\30\12\0"+
    "\35\30\3\0\14\31\4\0\14\31\12\0\12\31\36\30\2\0\5\30"+
    "\13\0\54\30\4\0\21\31\7\30\2\31\6\0\12\31\46\0\27\30"+
    "\5\31\4\0\65\30\12\31\1\0\35\31\2\0\13\31\6\0\12\31"+
    "\15\0\1\30\130\0\5\31\57\30\21\31\7\30\4\0\12\31\21\0"+
    "\11\31\14\0\3\31\36\30\12\31\3\0\2\30\12\31\6\0\46\30"+
    "\16\31\14\0\44\30\24\31\10\0\12\31\3\0\3\30\12\31\44\30"+
    "\122\0\3\31\1\0\25\31\4\30\1\31\4\30\1\31\15\0\300\30"+
    "\47\31\25\0\4\31\u0116\30\2\0\6\30\2\0\46\30\2\0\6\30"+
    "\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\37\30"+
    "\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30"+
    "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30\1\0\7\30"+
    "\16\0\5\31\32\0\5\31\20\0\2\30\23\0\1\30\13\0\5\31"+
    "\5\0\6\31\1\0\1\30\15\0\1\30\20\0\15\30\3\0\32\30"+
    "\26\0\15\31\4\0\1\31\3\0\14\31\21\0\1\30\4\0\1\30"+
    "\2\0\12\30\1\0\1\30\3\0\5\30\6\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\4\30\1\0\13\30\2\0\4\30\5\0\5\30"+
    "\4\0\1\30\21\0\51\30\u0a77\0\57\30\1\0\57\30\1\0\205\30"+
    "\6\0\4\30\3\31\16\0\46\30\12\0\66\30\11\0\1\30\17\0"+
    "\1\31\27\30\11\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\40\31"+
    "\57\0\1\30\u01d5\0\3\30\31\0\11\30\6\31\1\0\5\30\2\0"+
    "\5\30\4\0\126\30\2\0\2\31\2\0\3\30\1\0\132\30\1\0"+
    "\4\30\5\0\51\30\3\0\136\30\21\0\33\30\65\0\20\30\u0200\0"+
    "\u19b6\30\112\0\u51cc\30\64\0\u048d\30\103\0\56\30\2\0\u010d\30\3\0"+
    "\20\30\12\31\2\30\24\0\57\30\1\31\14\0\2\31\1\0\31\30"+
    "\10\0\120\30\2\31\45\0\11\30\2\0\147\30\2\0\4\30\1\0"+
    "\2\30\16\0\12\30\120\0\10\30\1\31\3\30\1\31\4\30\1\31"+
    "\27\30\5\31\20\0\1\30\7\0\64\30\14\0\2\31\62\30\21\31"+
    "\13\0\12\31\6\0\22\31\6\30\3\0\1\30\4\0\12\31\34\30"+
    "\10\31\2\0\27\30\15\31\14\0\35\30\3\0\4\31\57\30\16\31"+
    "\16\0\1\30\12\31\46\0\51\30\16\31\11\0\3\30\1\31\10\30"+
    "\2\31\2\0\12\31\6\0\27\30\3\0\1\30\1\31\4\0\60\30"+
    "\1\31\1\30\3\31\2\30\2\31\5\30\2\31\1\30\1\31\1\30"+
    "\30\0\3\30\43\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30"+
    "\1\0\7\30\221\0\43\30\10\31\1\0\2\31\2\0\12\31\6\0"+
    "\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0\u012e\30\2\0\76\30\2\0"+
    "\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\31\12\30\1\0"+
    "\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0"+
    "\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0\15\30\3\0"+
    "\20\31\20\0\7\31\14\0\2\30\30\0\3\30\31\0\1\30\6\0"+
    "\5\30\1\0\207\30\2\0\1\31\4\0\1\30\13\0\12\31\7\0"+
    "\32\30\4\0\1\30\1\0\32\30\13\0\131\30\3\0\6\30\2\0"+
    "\6\30\2\0\6\30\2\0\3\30\3\0\2\30\3\0\2\30\22\0"+
    "\3\31\4\0\14\30\1\0\32\30\1\0\23\30\1\0\2\30\1\0"+
    "\17\30\2\0\16\30\42\0\173\30\105\0\65\30\210\0\1\31\202\0"+
    "\35\30\3\0\61\30\57\0\37\30\21\0\33\30\65\0\36\30\2\0"+
    "\44\30\4\0\10\30\1\0\5\30\52\0\236\30\2\0\12\31\u0356\0"+
    "\6\30\2\0\1\30\1\0\54\30\1\0\2\30\3\0\1\30\2\0"+
    "\27\30\252\0\26\30\12\0\32\30\306\0\1\30\3\31\1\0\2\31"+
    "\5\0\4\31\4\30\1\0\3\30\1\0\33\30\4\0\3\31\4\0"+
    "\1\31\40\0\35\30\203\0\66\30\12\0\26\30\12\0\23\30\215\0"+
    "\111\30\u03b7\0\3\31\65\30\17\31\37\0\12\31\20\0\3\31\55\30"+
    "\13\31\2\0\1\31\u0f42\0\u036f\30\221\0\143\30\u0b9d\0\u042f\30\u33d1\0"+
    "\u0239\30\u45c7\0\2\30\u2163\0\5\31\3\0\26\31\2\0\7\31\36\0"+
    "\4\31\224\0\3\31\u01bb\0\125\30\1\0\107\30\1\0\2\30\2\0"+
    "\1\30\2\0\2\30\2\0\4\30\1\0\14\30\1\0\1\30\1\0"+
    "\7\30\1\0\101\30\1\0\4\30\2\0\10\30\1\0\7\30\1\0"+
    "\34\30\1\0\4\30\1\0\5\30\1\0\1\30\3\0\7\30\1\0"+
    "\u0154\30\2\0\31\30\1\0\31\30\1\0\37\30\1\0\31\30\1\0"+
    "\37\30\1\0\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\10\30\2\0\62\31\u2800\0\ua6d7\30\51\0\u1035\30\13\0"+
    "\336\30\u3fe2\0\u021e\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\31\36\0\140\31\200\0\360\31\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\3\7\1\13\15\7\1\14"+
    "\1\15\1\16\1\7\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\1\5\1\0\5\7\1\25\1\26\4\7"+
    "\1\27\11\7\2\24\1\0\1\5\1\0\1\7\1\30"+
    "\5\7\1\31\1\7\1\32\10\7\1\33\1\34\2\7"+
    "\1\35\3\7\1\36\4\7\1\37\1\7\1\40\3\7"+
    "\1\41\4\7\1\42\1\43\3\7\1\44\1\45\1\46"+
    "\3\7\1\47\5\7\1\50\4\7\1\0\2\7\1\0"+
    "\1\7\1\51\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\52\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\53\7\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\314\0\377\0\314"+
    "\0\u0132\0\u0165\0\u0198\0\314\0\314\0\314\0\u01cb\0\u01fe"+
    "\0\u0231\0\314\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\314"+
    "\0\314\0\314\0\u04fb\0\314\0\314\0\314\0\u052e\0\314"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u01fe\0\u01fe\0\u072c\0\u075f\0\u0792\0\u07c5\0\u01fe"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\314\0\u09f6\0\u0a29\0\u0a29\0\u0a5c\0\u01fe"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u01fe\0\u0b8e\0\u01fe"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u01fe\0\u01fe\0\u0d59\0\u0d8c\0\u01fe\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u01fe\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u01fe\0\u0f24\0\u01fe"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u01fe\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u01fe\0\u01fe\0\u10bc\0\u10ef\0\u1122\0\u01fe\0\u01fe\0\u01fe"+
    "\0\u1155\0\u1188\0\u11bb\0\u01fe\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u01fe\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u01fe\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\2\20\1\21"+
    "\6\20\1\22\1\20\1\0\1\23\1\24\1\25\1\20"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\20"+
    "\1\35\1\36\1\20\1\37\2\20\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\2\0\7\47\1\50"+
    "\1\47\1\0\46\47\62\0\1\46\2\0\1\6\147\0"+
    "\1\51\1\52\63\0\1\11\1\53\1\54\12\0\1\54"+
    "\45\0\1\53\62\0\1\20\1\0\1\20\4\0\3\20"+
    "\1\55\6\20\1\0\4\20\1\56\17\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\1\20\1\57\10\20"+
    "\1\0\24\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\24\20\3\0\1\20\11\0\1\20"+
    "\1\0\1\60\4\0\12\20\1\0\7\20\1\61\14\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\3\20\1\62\2\20\1\63\15\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\7\20"+
    "\1\64\1\65\13\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\7\20\1\66\14\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\2\20\1\67\21\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\12\20\1\70\11\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\4\20\1\71\17\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\72\4\0\12\20\1\0\24\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\73\4\0\12\20\1\0\24\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\12\20\1\74\11\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\12\20\1\75\11\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\12\20\1\76\11\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\4\20\1\77\17\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\7\20\1\100\14\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\7\20\1\101\14\20\3\0"+
    "\1\20\3\0\1\47\2\0\7\47\1\0\1\47\1\0"+
    "\46\47\1\51\1\102\1\103\60\51\5\52\1\104\55\52"+
    "\6\0\1\53\1\0\1\54\12\0\1\54\45\0\1\105"+
    "\2\0\1\106\47\0\1\106\7\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\6\20\1\107\15\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\5\20"+
    "\1\110\16\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\2\20\1\111\7\20\1\0\24\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\6\20"+
    "\1\112\15\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\10\20\1\113\13\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\12\20"+
    "\1\114\11\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\3\20\1\115\6\20\1\0\24\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\16\20"+
    "\1\116\5\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\13\20\1\117\10\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\5\20"+
    "\1\120\16\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\10\20\1\121\13\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\16\20"+
    "\1\122\1\20\1\123\3\20\3\0\1\20\11\0\1\20"+
    "\1\0\1\124\4\0\12\20\1\0\24\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\125\4\0\12\20\1\0\24\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\17\20\1\126\4\20\3\0\1\20\11\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\16\20\1\127\5\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\2\20\1\130\21\20\3\0\1\20\11\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\12\20\1\131\11\20"+
    "\3\0\1\20\5\0\1\103\60\0\4\52\1\103\1\104"+
    "\55\52\6\0\1\105\62\0\1\20\1\0\1\132\4\0"+
    "\12\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\3\20\1\133\6\20\1\0\24\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\6\20\1\134\15\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\5\20\1\135\16\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\136\4\0\12\20\1\0"+
    "\24\20\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\6\20\1\137\15\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\4\20\1\140"+
    "\17\20\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\12\20\1\141\11\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\17\20\1\142"+
    "\4\20\3\0\1\20\11\0\1\20\1\0\1\143\4\0"+
    "\12\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\10\20\1\144\13\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\10\20\1\145\13\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\146\4\0\12\20\1\0\24\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\2\20\1\147"+
    "\21\20\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\5\20\1\150\16\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\4\20\1\151\5\20\1\0"+
    "\24\20\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\22\20\1\152\1\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\21\20\1\153"+
    "\2\20\3\0\1\20\11\0\1\20\1\0\1\154\4\0"+
    "\12\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\10\20\1\155\13\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\12\20\1\156\11\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\10\20\1\157\13\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\16\20\1\160\5\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\15\20\1\161\6\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\3\20\1\162"+
    "\6\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\5\20\1\163\4\20\1\0\24\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\16\20\1\164\5\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\165\4\0\12\20\1\0\24\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\3\20\1\166\6\20\1\0"+
    "\24\20\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\4\20\1\167\17\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\16\20\1\170"+
    "\5\20\3\0\1\20\11\0\1\20\1\0\1\171\4\0"+
    "\12\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\6\20\1\172\3\20\1\0\24\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\11\20\1\173\12\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\12\20\1\174\11\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\12\20\1\175\11\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\7\20\1\176\2\20\1\0\24\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\10\20\1\177\13\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\22\20\1\200\1\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\10\20\1\201"+
    "\1\20\1\0\24\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\4\20\1\202\17\20\3\0"+
    "\1\20\11\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\16\20\1\203\5\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\11\20\1\204\1\0\24\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\22\20"+
    "\1\205\1\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\11\20\1\206\12\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\207\24\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\7\20\1\210\14\20\3\0\1\20\11\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\10\20\1\211\13\20"+
    "\3\0\1\20\20\0\1\212\53\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\12\20\1\213\11\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\4\20"+
    "\1\214\17\20\3\0\1\20\21\0\1\215\52\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\22\20\1\216\1\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\22\20\1\217\1\20\3\0\1\20\22\0\1\220"+
    "\51\0\1\20\1\0\1\221\4\0\12\20\1\0\24\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\7\20\1\222\14\20\3\0\1\20\23\0\1\223"+
    "\50\0\1\20\1\0\1\20\4\0\12\20\1\0\23\20"+
    "\1\224\3\0\1\20\11\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\12\20\1\225\11\20\3\0\1\20\24\0"+
    "\1\226\47\0\1\20\1\0\1\20\4\0\12\20\1\0"+
    "\17\20\1\227\4\20\3\0\1\20\11\0\1\20\1\0"+
    "\1\20\4\0\12\20\1\0\22\20\1\230\1\20\3\0"+
    "\1\20\25\0\1\231\46\0\1\20\1\0\1\20\4\0"+
    "\12\20\1\0\10\20\1\232\13\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\233\4\0\12\20\1\0\24\20\3\0"+
    "\1\20\26\0\1\234\45\0\1\20\1\0\1\20\4\0"+
    "\3\20\1\235\6\20\1\0\24\20\3\0\1\20\11\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\23\20\1\236"+
    "\3\0\1\20\27\0\1\237\44\0\1\20\1\0\1\20"+
    "\4\0\12\20\1\0\22\20\1\240\1\20\3\0\1\20"+
    "\11\0\1\20\1\0\1\20\4\0\12\20\1\0\17\20"+
    "\1\241\4\20\3\0\1\20\30\0\1\242\43\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\16\20\1\243\5\20"+
    "\3\0\1\20\11\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\10\20\1\244\13\20\3\0\1\20\31\0\1\245"+
    "\42\0\1\20\1\0\1\20\4\0\12\20\1\0\7\20"+
    "\1\246\14\20\3\0\1\20\11\0\1\20\1\0\1\20"+
    "\4\0\3\20\1\247\6\20\1\0\24\20\3\0\1\20"+
    "\32\0\1\250\41\0\1\20\1\0\1\20\4\0\12\20"+
    "\1\0\22\20\1\251\1\20\3\0\1\20\20\0\1\252"+
    "\53\0\1\20\1\0\1\20\4\0\12\20\1\0\16\20"+
    "\1\253\5\20\3\0\1\20\21\0\1\254\52\0\1\20"+
    "\1\0\1\20\4\0\12\20\1\0\7\20\1\255\14\20"+
    "\3\0\1\20\22\0\1\256\63\0\1\257\63\0\1\260"+
    "\63\0\1\261\63\0\1\262\63\0\1\263\63\0\1\264"+
    "\63\0\1\265\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\1\1\1\11\3\1\3\11\3\1"+
    "\1\11\15\1\3\11\1\1\3\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\26\1\1\11\1\0\1\1\1\0"+
    "\100\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2626) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            }
          case 45: break;
          case 2: 
            { return symbol(EOL);
            }
          case 46: break;
          case 3: 
            { return symbol(DIV);
            }
          case 47: break;
          case 4: 
            { return symbol(MULT);
            }
          case 48: break;
          case 5: 
            { return symbol(NumLit, new Double(yytext()));
            }
          case 49: break;
          case 6: 
            { return symbol(DOT);
            }
          case 50: break;
          case 7: 
            { return symbol(Identifier, yytext());
            }
          case 51: break;
          case 8: 
            { return symbol(MINUS);
            }
          case 52: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 53: break;
          case 10: 
            { yybegin(CHARLITERAL);
            }
          case 54: break;
          case 11: 
            { return symbol(COMMA);
            }
          case 55: break;
          case 12: 
            { return symbol(LPAREN);
            }
          case 56: break;
          case 13: 
            { return symbol(RPAREN);
            }
          case 57: break;
          case 14: 
            { return symbol(COLON);
            }
          case 58: break;
          case 15: 
            { return symbol(ASSIGN);
            }
          case 59: break;
          case 16: 
            { return symbol(PLUS);
            }
          case 60: break;
          case 17: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 61: break;
          case 18: 
            { string.append( yytext() );
            }
          case 62: break;
          case 19: 
            { yybegin(YYINITIAL); return symbol(StringLit, string.toString());
            }
          case 63: break;
          case 20: 
            { /* ignore */
            }
          case 64: break;
          case 21: 
            { return symbol(IF);
            }
          case 65: break;
          case 22: 
            { return symbol(IS);
            }
          case 66: break;
          case 23: 
            { return symbol(OR);
            }
          case 67: break;
          case 24: 
            { return symbol(END);
            }
          case 68: break;
          case 25: 
            { return symbol(NOT);
            }
          case 69: break;
          case 26: 
            { return symbol(AND);
            }
          case 70: break;
          case 27: 
            { return symbol(XOR);
            }
          case 71: break;
          case 28: 
            { return symbol(ELSE);
            }
          case 72: break;
          case 29: 
            { return symbol(LOAD);
            }
          case 73: break;
          case 30: 
            { return symbol(HEAR);
            }
          case 74: break;
          case 31: 
            { return symbol(TRUE);
            }
          case 75: break;
          case 32: 
            { return symbol(VOID);
            }
          case 76: break;
          case 33: 
            { return symbol(FALSE);
            }
          case 77: break;
          case 34: 
            { return symbol(BREAK);
            }
          case 78: break;
          case 35: 
            { return symbol(UNTIL);
            }
          case 79: break;
          case 36: 
            { return symbol(SIGNAL);
            }
          case 80: break;
          case 37: 
            { return symbol(RETURN);
            }
          case 81: break;
          case 38: 
            { return symbol(REPEAT);
            }
          case 82: break;
          case 39: 
            { return symbol(FOREVER);
            }
          case 83: break;
          case 40: 
            { return symbol(LT);
            }
          case 84: break;
          case 41: 
            { return symbol(GT);
            }
          case 85: break;
          case 42: 
            { return symbol(LTE);
            }
          case 86: break;
          case 43: 
            { return symbol(GTE);
            }
          case 87: break;
          case 44: 
            { return symbol(CoordLit);
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
