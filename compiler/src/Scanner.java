/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Nete/Documents/GitHub/P4/Compiler/src/java.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\2\1\0\1\3\1\1\16\21\4\0\1\3\1\0"+
    "\1\16\1\0\1\12\2\0\1\17\1\44\1\45\1\5\1\50\1\15"+
    "\1\11\1\7\1\4\12\6\3\0\1\47\3\0\1\30\1\34\1\12"+
    "\1\25\1\10\1\23\1\33\1\31\1\22\1\12\1\35\1\13\1\12"+
    "\1\24\1\27\1\40\1\43\1\32\1\26\1\36\1\37\1\41\1\12"+
    "\1\46\2\12\1\0\1\20\1\0\1\51\1\42\1\0\1\12\3\12"+
    "\1\14\3\12\1\12\2\12\1\12\1\12\1\12\3\12\1\12\1\12"+
    "\1\12\1\12\5\12\3\0\1\52\41\21\2\0\4\12\4\0\1\12"+
    "\2\0\1\21\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12"+
    "\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12"+
    "\21\0\160\21\5\12\1\0\2\12\2\0\4\12\10\0\1\12\1\0"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0\213\12\1\0"+
    "\5\21\2\0\236\12\11\0\46\12\2\0\1\12\7\0\47\12\7\0"+
    "\1\12\1\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21\1\0"+
    "\1\21\10\0\33\12\5\0\3\12\15\0\5\21\6\0\1\12\4\0"+
    "\13\21\5\0\53\12\37\21\4\0\2\12\1\21\143\12\1\0\1\12"+
    "\10\21\1\0\6\21\2\12\2\21\1\0\4\21\2\12\12\21\3\12"+
    "\2\0\1\12\17\0\1\21\1\12\1\21\36\12\33\21\2\0\131\12"+
    "\13\21\1\12\16\0\12\21\41\12\11\21\2\12\4\0\1\12\5\0"+
    "\26\12\4\21\1\12\11\21\1\12\3\21\1\12\5\21\22\0\31\12"+
    "\3\21\104\0\1\12\1\0\13\12\67\0\33\21\1\0\4\21\66\12"+
    "\3\21\1\12\22\21\1\12\7\21\12\12\2\21\2\0\12\21\1\0"+
    "\7\12\1\0\7\12\1\0\3\21\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0\1\21\1\12"+
    "\7\21\2\0\2\21\2\0\3\21\1\12\10\0\1\21\4\0\2\12"+
    "\1\0\3\12\2\21\2\0\12\21\4\12\7\0\1\12\5\0\3\21"+
    "\1\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12"+
    "\1\0\2\12\1\0\2\12\2\0\1\21\1\0\5\21\4\0\2\21"+
    "\2\0\3\21\3\0\1\21\7\0\4\12\1\0\1\12\7\0\14\21"+
    "\3\12\1\21\13\0\3\21\1\0\11\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\21\1\12\10\21"+
    "\1\0\3\21\1\0\3\21\2\0\1\12\17\0\2\12\2\21\2\0"+
    "\12\21\1\0\1\12\17\0\3\21\1\0\10\12\2\0\2\12\2\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\21\1\12"+
    "\7\21\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\12\1\0"+
    "\3\12\2\21\2\0\12\21\1\0\1\12\20\0\1\21\1\12\1\0"+
    "\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\3\0\3\12\3\0\14\12\4\0\5\21\3\0"+
    "\3\21\1\0\4\21\2\0\1\12\6\0\1\21\16\0\12\21\11\0"+
    "\1\12\7\0\3\21\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\12\7\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\1\0\2\12\6\0\2\12\2\21\2\0\12\21\22\0"+
    "\2\21\1\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0"+
    "\5\12\2\0\1\21\1\12\7\21\1\0\3\21\1\0\4\21\7\0"+
    "\2\21\7\0\1\12\1\0\2\12\2\21\2\0\12\21\1\0\2\12"+
    "\17\0\2\21\1\0\10\12\1\0\3\12\1\0\51\12\2\0\1\12"+
    "\7\21\1\0\3\21\1\0\4\21\1\12\10\0\1\21\10\0\2\12"+
    "\2\21\2\0\12\21\12\0\6\12\2\0\2\21\1\0\22\12\3\0"+
    "\30\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\21\4\0"+
    "\6\21\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\12\1\21"+
    "\2\12\7\21\4\0\10\12\10\21\1\0\12\21\47\0\2\12\1\0"+
    "\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0"+
    "\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\21\2\12\6\21\1\0\2\21\1\12\2\0\5\12\1\0"+
    "\1\12\1\0\6\21\2\0\12\21\2\0\4\12\40\0\1\12\27\0"+
    "\2\21\6\0\12\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0"+
    "\2\21\10\12\1\0\44\12\4\0\24\21\1\0\2\21\5\12\13\21"+
    "\1\0\44\21\11\0\1\21\71\0\53\12\24\21\1\12\12\21\6\0"+
    "\6\12\4\21\4\12\3\21\1\12\3\21\2\12\7\21\3\12\4\21"+
    "\15\12\14\21\1\12\17\21\2\0\46\12\1\0\1\12\5\0\1\12"+
    "\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12"+
    "\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12"+
    "\1\0\4\12\2\0\103\12\2\0\3\21\40\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\3\0\3\12"+
    "\17\0\15\12\1\0\4\12\3\21\13\0\22\12\3\21\13\0\22\12"+
    "\2\21\14\0\15\12\1\0\3\12\1\0\2\21\14\0\64\12\40\21"+
    "\3\0\1\12\3\0\2\12\1\21\2\0\12\21\41\0\3\21\2\0"+
    "\12\21\6\0\130\12\10\0\51\12\1\21\1\12\5\0\106\12\12\0"+
    "\35\12\3\0\14\21\4\0\14\21\12\0\12\21\36\12\2\0\5\12"+
    "\13\0\54\12\4\0\21\21\7\12\2\21\6\0\12\21\46\0\27\12"+
    "\5\21\4\0\65\12\12\21\1\0\35\21\2\0\13\21\6\0\12\21"+
    "\15\0\1\12\130\0\5\21\57\12\21\21\7\12\4\0\12\21\21\0"+
    "\11\21\14\0\3\21\36\12\15\21\2\12\12\21\54\12\16\21\14\0"+
    "\44\12\24\21\10\0\12\21\3\0\3\12\12\21\44\12\122\0\3\21"+
    "\1\0\25\21\4\12\1\21\4\12\3\21\2\12\11\0\300\12\47\21"+
    "\25\0\4\21\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0"+
    "\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0"+
    "\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0"+
    "\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12\16\0"+
    "\5\21\32\0\5\21\20\0\2\12\23\0\1\12\13\0\5\21\5\0"+
    "\6\21\1\0\1\12\15\0\1\12\20\0\15\12\3\0\33\12\25\0"+
    "\15\21\4\0\1\21\3\0\14\21\21\0\1\12\4\0\1\12\2\0"+
    "\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0"+
    "\1\12\21\0\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12\6\0"+
    "\4\12\3\21\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0"+
    "\70\12\7\0\1\12\17\0\1\21\27\12\11\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\40\21\57\0\1\12\u01d5\0\3\12\31\0\11\12"+
    "\6\21\1\0\5\12\2\0\5\12\4\0\126\12\2\0\2\21\2\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\21\2\12\24\0\57\12\1\21"+
    "\4\0\12\21\1\0\31\12\7\0\1\21\120\12\2\21\45\0\11\12"+
    "\2\0\147\12\2\0\4\12\1\0\4\12\14\0\13\12\115\0\12\12"+
    "\1\21\3\12\1\21\4\12\1\21\27\12\5\21\20\0\1\12\7\0"+
    "\64\12\14\0\2\21\62\12\21\21\13\0\12\21\6\0\22\21\6\12"+
    "\3\0\1\12\4\0\12\21\34\12\10\21\2\0\27\12\15\21\14\0"+
    "\35\12\3\0\4\21\57\12\16\21\16\0\1\12\12\21\46\0\51\12"+
    "\16\21\11\0\3\12\1\21\10\12\2\21\2\0\12\21\6\0\27\12"+
    "\3\0\1\12\1\21\4\0\60\12\1\21\1\12\3\21\2\12\2\21"+
    "\5\12\2\21\1\12\1\21\1\12\30\0\3\12\2\0\13\12\5\21"+
    "\2\0\3\12\2\21\12\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\10\21\1\0\2\21\2\0\12\21"+
    "\6\0\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12"+
    "\46\0\7\12\14\0\5\12\5\0\1\12\1\21\12\12\1\0\15\12"+
    "\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12"+
    "\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\15\12\3\0\20\21"+
    "\20\0\7\21\14\0\2\12\30\0\3\12\31\0\1\12\6\0\5\12"+
    "\1\0\207\12\2\0\1\21\4\0\1\12\13\0\12\21\7\0\32\12"+
    "\4\0\1\12\1\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12"+
    "\2\0\6\12\2\0\3\12\3\0\2\12\3\0\2\12\22\0\3\21"+
    "\4\0\14\12\1\0\32\12\1\0\23\12\1\0\2\12\1\0\17\12"+
    "\2\0\16\12\42\0\173\12\105\0\65\12\210\0\1\21\202\0\35\12"+
    "\3\0\61\12\57\0\37\12\21\0\33\12\65\0\36\12\2\0\44\12"+
    "\4\0\10\12\1\0\5\12\52\0\236\12\2\0\12\21\u0356\0\6\12"+
    "\2\0\1\12\1\0\54\12\1\0\2\12\3\0\1\12\2\0\27\12"+
    "\252\0\26\12\12\0\32\12\106\0\70\12\6\0\2\12\100\0\1\12"+
    "\3\21\1\0\2\21\5\0\4\21\4\12\1\0\3\12\1\0\33\12"+
    "\4\0\3\21\4\0\1\21\40\0\35\12\203\0\66\12\12\0\26\12"+
    "\12\0\23\12\215\0\111\12\u03b7\0\3\21\65\12\17\21\37\0\12\21"+
    "\20\0\3\21\55\12\13\21\2\0\1\21\22\0\31\12\7\0\12\21"+
    "\6\0\3\21\44\12\16\21\1\0\12\21\100\0\3\21\60\12\16\21"+
    "\4\12\13\0\12\21\u04a6\0\53\12\15\21\10\0\12\21\u0936\0\u036f\12"+
    "\221\0\143\12\u0b9d\0\u042f\12\u33d1\0\u0239\12\u04c7\0\105\12\13\0\1\12"+
    "\56\21\20\0\4\21\15\12\u4060\0\2\12\u2163\0\5\21\3\0\26\21"+
    "\2\0\7\21\36\0\4\21\224\0\3\21\u01bb\0\125\12\1\0\107\12"+
    "\1\0\2\12\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12"+
    "\1\0\1\12\1\0\7\12\1\0\101\12\1\0\4\12\2\0\10\12"+
    "\1\0\7\12\1\0\34\12\1\0\4\12\1\0\5\12\1\0\1\12"+
    "\3\0\7\12\1\0\u0154\12\2\0\31\12\1\0\31\12\1\0\37\12"+
    "\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0\31\12"+
    "\1\0\37\12\1\0\31\12\1\0\10\12\2\0\62\21\u1600\0\4\12"+
    "\1\0\33\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12"+
    "\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12"+
    "\1\0\4\12\1\0\1\12\1\0\12\12\1\0\21\12\5\0\3\12"+
    "\1\0\5\12\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12"+
    "\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\21\36\0\140\21\200\0\360\21\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\7\1\11\1\12\1\13\15\7\1\14"+
    "\1\15\1\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\0\1\21\1\24\1\0\1\5\1\0\4\7\1\25"+
    "\1\26\4\7\1\27\11\7\1\30\2\24\1\0\1\5"+
    "\1\0\1\7\1\31\4\7\1\32\1\7\1\33\10\7"+
    "\1\34\1\35\1\7\1\36\3\7\1\37\4\7\1\40"+
    "\1\7\1\41\2\7\1\42\4\7\1\43\1\44\2\7"+
    "\1\45\1\46\1\47\2\7\1\50\3\7\1\51\6\7"+
    "\1\52\20\7\1\53\3\7\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\254\0\327\0\254"+
    "\0\u0102\0\u012d\0\u0158\0\254\0\u0183\0\u01ae\0\254\0\254"+
    "\0\254\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db"+
    "\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\254\0\254"+
    "\0\u0408\0\254\0\254\0\254\0\254\0\u0433\0\254\0\u045e"+
    "\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u0183\0\u0183\0\u05e1\0\u060c\0\u0637\0\u0662\0\u0183"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\254\0\u0810\0\254\0\u083b\0\u0866\0\u0866\0\u0891"+
    "\0\u0183\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0183\0\u0968\0\u0183"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0183\0\u0183\0\u0aeb\0\u0183\0\u0b16\0\u0b41\0\u0b6c\0\u0183"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0183\0\u0c43\0\u0183\0\u0c6e"+
    "\0\u0c99\0\u0183\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0183\0\u0183"+
    "\0\u0d70\0\u0d9b\0\u0183\0\u0183\0\u0183\0\u0dc6\0\u0df1\0\u0183"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u0183\0\u12a5\0\u12d0\0\u12fb\0\u0183";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\17\1\20\1\21"+
    "\2\0\1\22\1\23\1\24\1\15\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\15\1\34\1\35\1\15"+
    "\1\36\2\15\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\0\13\46\1\47\1\46\1\0\32\46"+
    "\1\50\2\0\14\50\2\0\31\50\1\51\2\0\1\6"+
    "\127\0\1\52\1\53\53\0\1\11\1\54\1\55\3\0"+
    "\1\55\44\0\1\54\52\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\56\1\15\4\0\3\15\1\57\17\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\23\15\2\0\1\15\12\0\1\15\1\0\1\60\1\0"+
    "\3\15\4\0\6\15\1\61\14\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\2\15\1\62"+
    "\2\15\1\63\15\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\6\15\1\64\1\65\13\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\6\15\1\66\14\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\1\15\1\67\21\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\11\15\1\70\11\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\3\15\1\71\17\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\72\1\0\3\15"+
    "\4\0\23\15\2\0\1\15\12\0\1\15\1\0\1\73"+
    "\1\0\3\15\4\0\23\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\11\15\1\74\11\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\11\15\1\75\11\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\11\15\1\76\11\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\3\15\1\77\17\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\6\15\1\100\14\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\6\15\1\101\14\15\2\0\1\15\4\0\1\46"+
    "\2\0\13\46\1\0\1\46\1\0\32\46\17\0\1\102"+
    "\33\0\1\52\1\103\1\104\50\52\5\53\1\105\45\53"+
    "\6\0\1\54\1\0\1\55\3\0\1\55\44\0\1\106"+
    "\2\0\1\107\36\0\1\107\10\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\5\15\1\110\15\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\3\15\4\0\4\15"+
    "\1\111\16\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\5\15\1\112\15\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\3\15\4\0\7\15"+
    "\1\113\13\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\11\15\1\114\11\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\1\15\1\115\1\15"+
    "\4\0\23\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\15\15\1\116\5\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\3\15\4\0\12\15"+
    "\1\117\10\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\4\15\1\120\16\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\3\15\4\0\7\15"+
    "\1\121\13\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\3\15\4\0\15\15\1\122\1\15\1\123\3\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\124\1\0\3\15"+
    "\4\0\23\15\2\0\1\15\12\0\1\15\1\0\1\125"+
    "\1\0\3\15\4\0\23\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\16\15\1\126\4\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\15\15\1\127\5\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\1\15\1\130\21\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\11\15\1\131\11\15\2\0\1\15\6\0\1\104"+
    "\50\0\4\53\1\104\1\105\45\53\6\0\1\106\52\0"+
    "\1\15\1\0\1\132\1\0\3\15\4\0\23\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\5\15\1\133\15\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\4\15\1\134\16\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\135\1\0\3\15\4\0"+
    "\23\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\5\15\1\136\15\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\3\15\1\137"+
    "\17\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\11\15\1\140\11\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\16\15\1\141"+
    "\4\15\2\0\1\15\12\0\1\15\1\0\1\142\1\0"+
    "\3\15\4\0\23\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\7\15\1\143\13\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\7\15\1\144\13\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\145\1\0\3\15\4\0\23\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\1\15\1\146"+
    "\21\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\4\15\1\147\16\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\21\15\1\150"+
    "\1\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\20\15\1\151\2\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\152\1\0\3\15\4\0\23\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\7\15\1\153\13\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\11\15\1\154\11\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\7\15\1\155\13\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\15\15\1\156\5\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\14\15\1\157\6\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\160\1\15\4\0\23\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\15\15\1\161\5\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\162\1\0\3\15\4\0\23\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\163\1\15\4\0"+
    "\23\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\3\15\1\164\17\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\15\15\1\165"+
    "\5\15\2\0\1\15\12\0\1\15\1\0\1\166\1\0"+
    "\3\15\4\0\23\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\10\15\1\167\12\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\11\15\1\170\11\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\11\15\1\171\11\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\7\15\1\172\13\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\21\15\1\173\1\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\3\15\1\174\17\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\15\15\1\175\5\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\21\15\1\176\1\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\10\15\1\177\12\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\6\15\1\200\14\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\7\15\1\201\13\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\11\15\1\202\11\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\3\15\1\203\17\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\15\1\0\3\15\4\0"+
    "\21\15\1\204\1\15\2\0\1\15\12\0\1\15\1\0"+
    "\1\15\1\0\3\15\4\0\21\15\1\205\1\15\2\0"+
    "\1\15\12\0\1\15\1\0\1\206\1\0\3\15\4\0"+
    "\23\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\6\15\1\207\14\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\22\15\1\210"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\11\15\1\211\11\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\16\15\1\212\4\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\15\1\0\3\15"+
    "\4\0\21\15\1\213\1\15\2\0\1\15\12\0\1\15"+
    "\1\0\1\15\1\0\3\15\4\0\7\15\1\214\13\15"+
    "\2\0\1\15\12\0\1\15\1\0\1\215\1\0\3\15"+
    "\4\0\23\15\2\0\1\15\12\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\216\1\15\4\0\23\15\2\0\1\15"+
    "\12\0\1\15\1\0\1\15\1\0\3\15\4\0\22\15"+
    "\1\217\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\21\15\1\220\1\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\16\15\1\221"+
    "\4\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\15\15\1\222\5\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\7\15\1\223"+
    "\13\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\6\15\1\224\14\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\225\1\15\4\0"+
    "\23\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\21\15\1\226\1\15\2\0\1\15\12\0"+
    "\1\15\1\0\1\15\1\0\3\15\4\0\15\15\1\227"+
    "\5\15\2\0\1\15\12\0\1\15\1\0\1\15\1\0"+
    "\3\15\4\0\6\15\1\230\14\15\2\0\1\15\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4902];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\1\1\1\11\3\1\1\11\2\1"+
    "\3\11\15\1\2\11\1\1\4\11\1\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\24\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2864) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            }
          case 45: break;
          case 2: 
            { return symbol(EOL);
            }
          case 46: break;
          case 3: 
            { return symbol(DIV);
            }
          case 47: break;
          case 4: 
            { return symbol(MULT);
            }
          case 48: break;
          case 5: 
            { return symbol(NumLit, new Double(yytext()));
            }
          case 49: break;
          case 6: 
            { return symbol(DOT);
            }
          case 50: break;
          case 7: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 51: break;
          case 8: 
            { return symbol(MINUS);
            }
          case 52: break;
          case 9: 
            { return symbol(COMMA);
            }
          case 53: break;
          case 10: 
            { yybegin(STRING); string.setLength(0);
            }
          case 54: break;
          case 11: 
            { yybegin(CHARLITERAL);
            }
          case 55: break;
          case 12: 
            { return symbol(LPAREN);
            }
          case 56: break;
          case 13: 
            { return symbol(RPAREN);
            }
          case 57: break;
          case 14: 
            { return symbol(ASSIGN);
            }
          case 58: break;
          case 15: 
            { return symbol(PLUS);
            }
          case 59: break;
          case 16: 
            { return symbol(PWR);
            }
          case 60: break;
          case 17: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 61: break;
          case 18: 
            { string.append( yytext() );
            }
          case 62: break;
          case 19: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 63: break;
          case 20: 
            { /* ignore */
            }
          case 64: break;
          case 21: 
            { return symbol(IF);
            }
          case 65: break;
          case 22: 
            { return symbol(IS);
            }
          case 66: break;
          case 23: 
            { return symbol(OR);
            }
          case 67: break;
          case 24: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 68: break;
          case 25: 
            { return symbol(END);
            }
          case 69: break;
          case 26: 
            { return symbol(NOT);
            }
          case 70: break;
          case 27: 
            { return symbol(AND);
            }
          case 71: break;
          case 28: 
            { return symbol(XOR);
            }
          case 72: break;
          case 29: 
            { return symbol(ELSE);
            }
          case 73: break;
          case 30: 
            { return symbol(LOAD);
            }
          case 74: break;
          case 31: 
            { return symbol(HEAR);
            }
          case 75: break;
          case 32: 
            { return symbol(TRUE);
            }
          case 76: break;
          case 33: 
            { return symbol(VOID);
            }
          case 77: break;
          case 34: 
            { return symbol(FALSE);
            }
          case 78: break;
          case 35: 
            { return symbol(BREAK);
            }
          case 79: break;
          case 36: 
            { return symbol(UNTIL);
            }
          case 80: break;
          case 37: 
            { return symbol(SIGNAL);
            }
          case 81: break;
          case 38: 
            { return symbol(RETURN);
            }
          case 82: break;
          case 39: 
            { return symbol(REPEAT);
            }
          case 83: break;
          case 40: 
            { return symbol(FOREVER);
            }
          case 84: break;
          case 41: 
            { return symbol(LT);
            }
          case 85: break;
          case 42: 
            { return symbol(GT);
            }
          case 86: break;
          case 43: 
            { return symbol(LTE);
            }
          case 87: break;
          case 44: 
            { return symbol(GTE);
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
